<launch>
    <arg name="control_interface" default="twist"/>
    <arg name="example"           default="false"/>
    <arg name="params_yaml_file"  default="$(find iiwa_interactive_controller)/config/passiveDS_impedance_params.yaml" />
    <arg name="optitrack"         default="false"/>
    
    <!-- <arg name="gui"             default="true"/>
    <arg name="world_name"      default="world"/> 
    <arg name="human_rviz"      default="false"/>
    <arg name="robot_rviz"      default="true"/>
    <arg name="human_model"     value="human"/>
    <arg name="robot_model"     value="iiwa"/> -->

    <include file="$(find iiwa_driver)/launch/iiwa_bringup.launch">
        <arg name="model" value="14" />
    </include>

    <node name="iiwa_interactive_bringup" pkg="iiwa_interactive_controller" type="iiwa_interactive_controller_bringup" output="screen" cwd="node" />
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find iiwa_interactive_controller)/config/iiwa.rviz" />
    <group if="$(arg example)">
        <node name="iiwa_interactive_position_interface" pkg="iiwa_interactive_controller" type="iiwa_interactive_controller_position_interface" output="screen" cwd="node" />
    </group>

    <param name="control_interface"   value="$(arg control_interface)"/>
    <rosparam file="$(arg params_yaml_file)" command="load"/>
    
    <group ns="ft_sensor">
        <param name="ft_sensor_model" value="rokubimini_ethercat" />
        <include file="$(find ${ft_sensor_model})/launch/${ft_sensor_model}.launch">
        </include>
    </group>

    <!-- FT_sensor calibrarion -->
    <!-- rosservice call /bus0/ft_sensor0/reset_wrench "desired_wrench: {force: {x: 0.0, y: 0.0, z: 0.0}, torque: {x: 0.0, y: 0.0, z: 0.0}}" -->
    
    <group ns="xela_sensor">
        <include file="$(find ${xela_server_ros})/launch/service.launch">
        </include>
    </group>

    <node pkg="tf" type="static_transform_publisher" name="force_sensor_tf_pub" args="0 0 0.0375 0 0 0.707 0.707 iiwa_link_ee ft_sensor_frame_id 100" />
    
    <node name="synced_publisher" pkg="hhi_force" type="xela_text.py" output="screen"/>


    <!-- <node name="rq_sensor_custom" pkg="robotiq_force_torque_sensor_custom" type="rq_sensor_custom" />
    <node name="rq_stream_sensor_custom" pkg="robotiq_force_torque_sensor_custom" type="rq_stream_sensor_custom" />
    <node name="rq_calibrate_sensor_custom" pkg="robotiq_force_torque_sensor_custom" type="rq_calibrate_sensor_custom" />
    <node name="rq_sensor_info_custom" pkg="robotiq_force_torque_sensor_custom" type="rq_sensor_info_custom" />
    <node pkg="tf" type="static_transform_publisher" name="force_sensor_tf_pub" args="0 0 0.0375 0 0 0.707 0.707 iiwa_link_ee robotiq_force_torque_frame_id 100" /> -->
  
    <!-- <group if="$(arg optitrack)">
        <include file="$(find natnet_ros_cpp)/launch/natnet_ros.launch">
        </include>
    </group> -->

    <!-- <group ns="human">
        <param name="tf_prefix" value="human" />
        <include file="$(find intent_capability_hri)/launch/human.launch">
            <arg name="human_rviz" value="false"/>
            <arg name="robot_name" value="$(arg human_model)" />
        </include> 
    </group> -->

    <!-- <group ns="robot">
        <param name="tf_prefix" value="robot" />
        <arg name="robot_name" default="$(arg robot_model)" />
    </group> -->

    <!-- <include file="$(find iiwa_interactive_controller)/launch/cartesian_impedance_gazebo.launch">
        <arg name="gui" value="false"/>
        <arg name="robot_rviz" value="false"/>
    </include> -->


    
    <!-- <arg name="rvizconfig" default="$(find intent_capability_hri)/cfg/robot_human_config.rviz" /> -->
    <!-- <node name="robot_human_rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)"  /> -->

    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="human_base_broadcaster" args="0 0 0 0 0 0 1 world human/human_base_link" ns="human" /> -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="robot_base_broadcaster" args="0 0 0 0 0 0 1 world iiwa_link_0" ns="robot" /> -->

    <!-- <node name="ellipsoid_publisher" pkg="intent_capability_hri" type="human_ellipsoid.py" output="screen" ns="human" /> -->
    
    <!-- <node name="spawn_urdf_human" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg human_model) -x 0 -y 0 -z 0 -param human_description" />  -->


    <!-- <include file="$(find iiwa_interactive_controller)/launch/passiveDS_gazebo.launch"></include> -->
    <!-- <include file="$(find iiwa_interactive_controller)/launch/joint_impedance_gazebo.launch"></include> -->

    <!-- <include file="$(find iiwa_interactive_controller)/launch/admittance_real.launch"></include> -->
    <!-- <node name="iiwa_interactive_position_interface" pkg="iiwa_interactive_controller" type="iiwa_interactive_controller_position_interface" output="screen" cwd="node" /> -->
    

</launch>
